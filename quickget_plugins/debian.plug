#!/usr/bin/bash
#
#   This template identifies the functions required to supported by each OS

#function create_vm() {
#    #    This function can be used to over rid the standard function in quickget
#    #    if you distribution requires something special. Windows and Mac are examples..
#}

# This function returns an associative array with keys "url", "iso", and "hash"
# Change this function for your distro
function get_distro_info() {
    declare -A distro_info

    distro_info['hash']=""
    distro_info['iso']="debian-live-${RELEASE}-amd64-${EDITION}.iso"
    distro_info['url']=""

    DEBCURRENT=$(wget -q https://cdimage.debian.org/debian-cd/ -O- |grep '\.[0-9]/'|cut -d\> -f9|cut -d\/ -f1)
    case ${RELEASE} in
        "${DEBCURRENT}") distro_info['url']="https://cdimage.debian.org/debian-cd/${RELEASE}-live/amd64/iso-hybrid";;
        *) distro_info['url']="https://cdimage.debian.org/cdimage/archive/${RELEASE}-live/amd64/iso-hybrid/";;
    esac

    if [ "${EDITION}" == "netinst" ]; then
        distro_info['url']="${distro_info['url']/-live/}"
        distro_info['url']="${distro_info['url']/hybrid/cd}"
        distro_info['iso']="${distro_info['iso']/-live/}"
    fi

    distro_info['hash']=$(wget -q -O- "${distro_info['url']}/SHA512SUMS" \
        | grep "${distro_info['iso']}"$ \
        | cut -d' ' -f1)

    for key in "${!distro_info[@]}"; do
        echo "${key}" "${distro_info[${key}]}"
    done
}

#function get_file() {
#    #    This function can be used to over rid the standard function in quickget
#    #    if you distribution requires something special. Windows and Mac are examples..
#}

# This function returns supported OS releases for the OS
# Change this function for your distro
function releases() {
   DEBCURRENT=$(wget -q https://cdimage.debian.org/debian-cd/ -O- |grep '\.[0-9]/'|cut -d\> -f9|cut -d\/ -f1)
    local DEBOLD=$(wget -q https://cdimage.debian.org/cdimage/archive/ -O- |grep -e '>[1-9][0-9]\.'|grep -v 'live' | cut -d\> -f9|cut -d\/ -f1 )

    echo  ${DEBOLD} ${DEBCURRENT}
}

# This function returns an associative array with releases as the key
# and a "!" separated string of valid editions for the specific release.
# While quite often editions are the same for all releases it is not always
# the case.
# Editions have different meanings for different OS's
# Change this function for your distro
function editions() {
    declare -A editions
    local release

    for release in $(releases); do
        editions[${release}]="standard!cinnamon!gnome!kde!lxde!lxqt!mate!xfce!netinst"
    done

    for key in "${!editions[@]}"; do
        echo "${key}" "${editions[${key}]}"
    done
}

# Change this function for your distro
# Returning 0 means editions are required and 1 not required
function editions_required() {
    return 0
}

# This function returns an expanded OS name for pretty printing
# Change this function for your distro
function pretty_name() {
    echo "debian Linux"
}

# This function returns the OS's home page URL
# Change this function for your distro
function homepage() {
    echo "https://www.debian.org/"
}

# This function creates the vm_config file and can be used to
# replace the default one in the quickget
# Change this function for your distro
function make_vm_config() {
    default_vm_config

    # Override any default settings
    #sed -i 's/^disk_size=.*/disk_size=\"80G\"/' "${VM_PATH}".conf

    # Add any additional lines
    # {
    #     printf "fixed_iso=\"%s\"\n"   ${fixed_iso}
    #
    # } >> "${VM_PATH}.conf"
}
