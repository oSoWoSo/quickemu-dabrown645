#!/usr/bin/bash
#
#   This template identifies the functions required to supported by each OS

#function create_vm() {
#    #    This function can be used to over rid the standard function in quickget
#    #    if you distribution requires something special. Windows and Mac are examples..
#}

# This function returns an associative array with keys "url", "iso", and "hash"
# Change this function for your distro
function get_distro_info() {
    declare -A distro_info
    local url_base="https://cdimage.ubuntu.com/edubuntu"
    local hash_url
    local data

    case "${RELEASE}" in
        daily-live)
            distro_info['url']="${url_base}/${RELEASE}/current"
            hash_url="${url_base}/${RELEASE}/current"
            ;;
        *)  distro_info['url']="https://cdimage.ubuntu.com/edubuntu/releases/${RELEASE}/release"
            hash_url="https://cdimage.ubuntu.com/edubuntu/releases/${RELEASE}/release"
            ;;
    esac

    if wget -q --spider "${hash_url}/SHA256SUMS"; then
        data=$(wget -qO- "${hash_url}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        distro_info['iso']=$(cut -d'*' -f2 <<<${data} | sed '1q;d')
        distro_info['hash']=$(cut -d' ' -f1 <<<${data} | sed '1q;d')
    else
        data=$(wget -qO- "${hash_url}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        distro_info['iso']=$(cut -d'*' -f2 <<<${data})
        distro_info['hash']=$(cut -d' ' -f1 <<<${data})
    fi

    for key in "${!distro_info[@]}"; do
        echo "${key}" "${distro_info[${key}]}"
    done
}

#function get_file() {
#    #    This function can be used to over rid the standard function in quickget
#    #    if you distribution requires something special. Windows and Mac are examples..
#}

# This function returns supported OS releases for the OS
# Change this function for your distro
function releases() {
    local version_data="$(IFS=$'\n' wget -qO- https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    local supported_versions=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<${version_data} | sort))
    local eol_versions=($(IFS=$'\n' jq -r 'select(.status=="Obsolete") | .version' <<<${version_data} | sort))
    local lts_support=()
    local interim_support=()

    for i in "${supported_versions[@]}"; do
        if [[ $(expr ${i%.*} % 2) == 0 && ${i#*.} == "04" ]]; then
            lts_support+=($i)
        else
            interim_support+=($i)
        fi
    done

    echo "${interim_support[@]} daily-live"
}

# This function returns an associative array with releases as the key
# and a "!" separated string of valid editions for the specific release.
# While quite often editions are the same for all releases it is not always
# the case.
# Editions have different meanings for different OS's
# Change this function for your distro
function editions() {
    declare -A editions
    local release

    for release in $(releases); do
        editions[${release}]=""
    done

    for key in "${!editions[@]}"; do
        echo "${key}" "${editions[${key}]}"
    done
}

# Change this function for your distro
# Returning 0 means editions are required and 1 not required
function editions_required() {
    return 1
}

# This function returns an expanded OS name for pretty printing
# Change this function for your distro
function pretty_name() {
    echo "Edubuntu Linux"
}

# This function returns the OS's home page URL
# Change this function for your distro
function homepage() {
    echo "https://www.edubuntu.org/"
}

# This function creates the vm_config file and can be used to
# replace the default one in the quickget
# Change this function for your distro
function make_vm_config() {
    default_vm_config

    # Override any default settings
    #sed -i 's/^disk_size=.*/disk_size=\"80G\"/' "${VM_PATH}".conf

    # Add any additional lines
    # {
    #     printf "fixed_iso=\"%s\"\n"   ${fixed_iso}
    #
    # } >> "${VM_PATH}.conf"
}
